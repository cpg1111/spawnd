// Code generated by protoc-gen-go.
// source: process.proto
// DO NOT EDIT!

/*
Package protobufs is a generated protocol buffer package.

It is generated from these files:
	process.proto

It has these top-level messages:
	ProcessStateRequest
	ProcessStateReply
*/
package protobufs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProcessStateRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	State string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
}

func (m *ProcessStateRequest) Reset()                    { *m = ProcessStateRequest{} }
func (m *ProcessStateRequest) String() string            { return proto.CompactTextString(m) }
func (*ProcessStateRequest) ProtoMessage()               {}
func (*ProcessStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ProcessStateReply struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	State   string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ProcessStateReply) Reset()                    { *m = ProcessStateReply{} }
func (m *ProcessStateReply) String() string            { return proto.CompactTextString(m) }
func (*ProcessStateReply) ProtoMessage()               {}
func (*ProcessStateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*ProcessStateRequest)(nil), "protobufs.ProcessStateRequest")
	proto.RegisterType((*ProcessStateReply)(nil), "protobufs.ProcessStateReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Process service

type ProcessClient interface {
	Start(ctx context.Context, in *ProcessStateRequest, opts ...grpc.CallOption) (*ProcessStateReply, error)
	Stop(ctx context.Context, in *ProcessStateRequest, opts ...grpc.CallOption) (*ProcessStateReply, error)
	Restart(ctx context.Context, in *ProcessStateRequest, opts ...grpc.CallOption) (*ProcessStateReply, error)
	Reload(ctx context.Context, in *ProcessStateRequest, opts ...grpc.CallOption) (*ProcessStateReply, error)
}

type processClient struct {
	cc *grpc.ClientConn
}

func NewProcessClient(cc *grpc.ClientConn) ProcessClient {
	return &processClient{cc}
}

func (c *processClient) Start(ctx context.Context, in *ProcessStateRequest, opts ...grpc.CallOption) (*ProcessStateReply, error) {
	out := new(ProcessStateReply)
	err := grpc.Invoke(ctx, "/protobufs.Process/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processClient) Stop(ctx context.Context, in *ProcessStateRequest, opts ...grpc.CallOption) (*ProcessStateReply, error) {
	out := new(ProcessStateReply)
	err := grpc.Invoke(ctx, "/protobufs.Process/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processClient) Restart(ctx context.Context, in *ProcessStateRequest, opts ...grpc.CallOption) (*ProcessStateReply, error) {
	out := new(ProcessStateReply)
	err := grpc.Invoke(ctx, "/protobufs.Process/Restart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processClient) Reload(ctx context.Context, in *ProcessStateRequest, opts ...grpc.CallOption) (*ProcessStateReply, error) {
	out := new(ProcessStateReply)
	err := grpc.Invoke(ctx, "/protobufs.Process/Reload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Process service

type ProcessServer interface {
	Start(context.Context, *ProcessStateRequest) (*ProcessStateReply, error)
	Stop(context.Context, *ProcessStateRequest) (*ProcessStateReply, error)
	Restart(context.Context, *ProcessStateRequest) (*ProcessStateReply, error)
	Reload(context.Context, *ProcessStateRequest) (*ProcessStateReply, error)
}

func RegisterProcessServer(s *grpc.Server, srv ProcessServer) {
	s.RegisterService(&_Process_serviceDesc, srv)
}

func _Process_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobufs.Process/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).Start(ctx, req.(*ProcessStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Process_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobufs.Process/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).Stop(ctx, req.(*ProcessStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Process_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobufs.Process/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).Restart(ctx, req.(*ProcessStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Process_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobufs.Process/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).Reload(ctx, req.(*ProcessStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Process_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobufs.Process",
	HandlerType: (*ProcessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Process_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Process_Stop_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _Process_Restart_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _Process_Reload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("process.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x28, 0xca, 0x4f,
	0x4e, 0x2d, 0x2e, 0xd6, 0x03, 0xd2, 0x25, 0xf9, 0x42, 0x9c, 0x60, 0x2a, 0xa9, 0x34, 0xad, 0x58,
	0xc9, 0x9e, 0x4b, 0x38, 0x00, 0x22, 0x17, 0x5c, 0x92, 0x58, 0x92, 0x1a, 0x94, 0x5a, 0x58, 0x9a,
	0x5a, 0x5c, 0x22, 0x24, 0xc4, 0xc5, 0x92, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1,
	0x19, 0x04, 0x66, 0x0b, 0x89, 0x70, 0xb1, 0x16, 0x83, 0xd4, 0x48, 0x30, 0x81, 0x05, 0x21, 0x1c,
	0xa5, 0x70, 0x2e, 0x41, 0x54, 0x03, 0x0a, 0x72, 0x2a, 0x89, 0xd7, 0x2e, 0x24, 0xc1, 0xc5, 0x9e,
	0x0b, 0xd4, 0x9b, 0x98, 0x9e, 0x2a, 0xc1, 0x0c, 0x16, 0x87, 0x71, 0x8d, 0xd6, 0x33, 0x71, 0xb1,
	0x43, 0x4d, 0x16, 0x72, 0xe7, 0x62, 0x05, 0x9a, 0x5e, 0x54, 0x22, 0x24, 0xa7, 0x07, 0x77, 0xba,
	0x1e, 0x16, 0x77, 0x4b, 0xc9, 0xe0, 0x94, 0x07, 0x3a, 0x4b, 0x89, 0x41, 0xc8, 0x8d, 0x8b, 0x25,
	0xb8, 0x24, 0xbf, 0x80, 0x62, 0x73, 0x3c, 0xb9, 0xd8, 0x83, 0x80, 0xea, 0xa8, 0xe1, 0x24, 0x0f,
	0x2e, 0xb6, 0xa0, 0xd4, 0x9c, 0xfc, 0xc4, 0x14, 0x4a, 0x4d, 0x4a, 0x62, 0x03, 0x4b, 0x1b, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x45, 0x45, 0x9f, 0xb8, 0xee, 0x01, 0x00, 0x00,
}
